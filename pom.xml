<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.0</version>
    <relativePath />
  </parent>

  <groupId>net.coatli</groupId>
  <artifactId>payments-service</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>payments-service</name>
  <description>Payments Service</description>

  <properties>
    <java.version>17</java.version>
    <maven>3.9.9</maven>

    <project.build.environment>prod</project.build.environment>
    <project.build.resourcesDirectory>${basedir}/src/main/resources</project.build.resourcesDirectory>
    <project.build.filterDirectory>${basedir}/src/main/filters</project.build.filterDirectory>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.jdk.source>${java.version}</project.build.jdk.source>
    <project.build.jdk.target>${java.version}</project.build.jdk.target>

    <properties.maven.plugin.version>1.2.1</properties.maven.plugin.version>
    <editorconfig.maven.plugin.version>0.1.3</editorconfig.maven.plugin.version>
    <lombok.maven.plugin>1.18.36</lombok.maven.plugin>
    <maven.compiler.plugin.version>3.13.0</maven.compiler.plugin.version>
    <docker.maven.plugin.version>0.45.1</docker.maven.plugin.version>

    <jsoniter.version>0.9.23</jsoniter.version>
    <javassist.version>3.29.0-GA</javassist.version>
    <postgres.version>42.7.4</postgres.version>

    <lombok.version>1.18.36</lombok.version>
    <mapstruct.version>1.6.3</mapstruct.version>
    <lombok.mapstruct.binding.version>0.2.0</lombok.mapstruct.binding.version>

    <openapi.build.directory>${project.basedir}/src/main/openapi</openapi.build.directory>

    <docker.build.directory>${project.basedir}/src/main/docker</docker.build.directory>
    <docker.image.alias>${project.artifactId}</docker.image.alias>
    <docker.image.registry>docker.io</docker.image.registry>
    <docker.image.name>${project.artifactId}:${project.version}</docker.image.name>
    <docker.image.dockerfiledir>${project.build.outputDirectory}</docker.image.dockerfiledir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.jsoniter</groupId>
      <artifactId>jsoniter</artifactId>
      <version>${jsoniter.version}</version>
    </dependency>
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>${javassist.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Provided -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>${project.build.resourcesDirectory}</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${openapi.build.directory}</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${docker.build.directory}</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <filters>
      <filter>${project.build.filterDirectory}/${project.build.environment}.properties</filter>
    </filters>

    <!-- Defining the plugin stack -->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${properties.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>${project.build.filterDirectory}/${project.build.environment}.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.ec4j.maven</groupId>
        <artifactId>editorconfig-maven-plugin</artifactId>
        <version>${editorconfig.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <exclude>mvnw*</exclude>
            <exclude>.mvn/**</exclude>
            <exclude>**/*.swp</exclude>
          </excludes>
          <includes>
            <include>**</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin.version}</version>
        <configuration>
          <source>${project.build.jdk.source}</source>
          <target>${project.build.jdk.target}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok-mapstruct-binding</artifactId>
              <version>${lombok.mapstruct.binding.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <verbose>true</verbose>
          <images>
            <image>
              <registry>${docker.image.registry}</registry>
              <name>${docker.image.name}</name>
              <build>
                <dockerFileDir>${docker.image.dockerfiledir}</dockerFileDir>
                <assembly>
                  <name>artifact</name>
                  <descriptorRef>artifact</descriptorRef>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>local</id>

      <properties>
        <project.build.environment>local</project.build.environment>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>mongodb</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <images>
                    <image>
                      <alias>mongodb</alias>
                      <name>mongo:6.0</name>
                      <run>
                        <net>host</net>
                        <containerNamePattern>%a</containerNamePattern>
                        <volumes>
                          <bind>
                            <volume>/tmp/mongodb:/data/db</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>rabbitmq</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <images>
                    <image>
                      <alias>rabbitmq</alias>
                      <name>rabbitmq:3.12-management</name>
                      <run>
                        <net>host</net>
                        <containerNamePattern>%a</containerNamePattern>
                        <volumes>
                          <bind>
                            <volume>/tmp/rabbitmq:/var/lib/rabbitmq</volume>
                          </bind>
                        </volumes>
                        <wait>
                          <log>.*Server startup complete</log>
                          <time>15000</time>
                        </wait>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>${project.artifactId}</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <images>
                    <image>
                      <alias>${project.artifactId}</alias>
                      <registry>${docker.image.registry}</registry>
                      <name>${docker.image.name}</name>
                      <run>
                        <net>host</net>
                        <containerNamePattern>%a</containerNamePattern>
                        <volumes>
                          <bind>
                            <volume>/tmp:/tmp</volume>
                          </bind>
                        </volumes>
                        <wait>
                          <log>.*Started PaymentsServiceApplication</log>
                          <time>30000</time>
                        </wait>
                        <log>
                          <enabled>true</enabled>
                        </log>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>functional-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <images>
                    <image>
                      <alias>intellij-http-client</alias>
                      <name>jetbrains/intellij-http-client</name>
                      <run>
                        <net>host</net>
                        <containerNamePattern>%a</containerNamePattern>
                        <volumes>
                          <bind>
                            <volume>${project.basedir}/src/test/resources/intellij-httpclient:/workdir</volume>
                          </bind>
                        </volumes>
                        <cmd>
                          <arg>-LVERBOSE</arg>
                          <arg>-elocal</arg>
                          <arg>-venv.json</arg>
                          <arg>payments-service.http</arg>
                        </cmd>
                        <wait>
                          <log>.*RUN SUCCESSFUL</log>
                          <time>30000</time>
                        </wait>
                        <log>
                          <enabled>true</enabled>
                        </log>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>dev</id>

      <properties>
        <project.build.environment>dev</project.build.environment>
      </properties>
    </profile>

    <profile>
      <id>prod</id>

      <properties>
        <project.build.environment>prod</project.build.environment>
      </properties>
    </profile>
  </profiles>

</project>
